class Solution{
    
    // arr: input array
    // n: size of array
    // Function to find the trapped water between the blocks.
    static long trappingWater(int arr[], int n) {
    long trappedWater = 0;
    int leftMax[] = new int[n];
    int rightMax[] = new int[n];

    // Initialize leftMax and rightMax arrays
    leftMax[0] = arr[0];
    for (int i = 1; i < n; i++) {
      leftMax[i] = Math.max(leftMax[i - 1], arr[i]);
    }
    rightMax[n - 1] = arr[n - 1];
    for (int i = n - 2; i >= 0; i--) {
      rightMax[i] = Math.max(rightMax[i + 1], arr[i]);
    }

    // Calculate trapped water for each element
    for (int i = 0; i < n; i++) {
      trappedWater += Math.min(leftMax[i], rightMax[i]) - arr[i];
    }

    return trappedWater;
  }
}
