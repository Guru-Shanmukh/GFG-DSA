class Solution
{
    // arr[]: input array
    // n: size of array
    //Function to find the length of longest subarray of even and odd numbers.
    public static int maxEvenOdd(int arr[], int n) {
    int maxLength = 1; // Initialize with 1 (minimum possible length)
    int count = 1; // Counter for current subarray length

    for (int i = 1; i < n; i++) {
      // Check if current and previous elements have different parity (even/odd)
      if ((arr[i - 1] % 2 == 0 && arr[i] % 2 != 0) ||
          (arr[i - 1] % 2 != 0 && arr[i] % 2 == 0)) {
        count++; // Increment counter if parity alternates
      } else {
        count = 1; // Reset counter if parity doesn't alternate
      }
      maxLength = Math.max(maxLength, count); // Update max length
    }

    return maxLength;
  }
}
