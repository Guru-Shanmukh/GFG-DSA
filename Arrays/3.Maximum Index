class Solution {
    // Function to find the maximum index difference.
    int maxIndexDiff(int[] arr) {
        // Your code here
        int n = arr.length;
        int[] minLeft = new int[n]; // stores minimum element seen so far from left
        int[] maxRight = new int[n]; // stores maximum element seen so far from right

        // Initialize minLeft and maxRight arrays
        minLeft[0] = arr[0];
        maxRight[n - 1] = arr[n - 1];
        for (int i = 1; i < n; i++) {
            minLeft[i] = Math.min(minLeft[i - 1], arr[i]);
        }
        for (int i = n - 2; i >= 0; i--) {
            maxRight[i] = Math.max(maxRight[i + 1], arr[i]);
        }

        // Iterate through the array and find the maximum difference
        int maxDiff = -1, i = 0, j = 0;
        while (i < n && j < n) {
            if (minLeft[i] <= maxRight[j]) { // Check for both less than and equal to
                maxDiff = Math.max(maxDiff, j - i);
                j++;
            } else {
                i++;
            }
        }

        return maxDiff;
    }
}
