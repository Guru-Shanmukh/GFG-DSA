class Solution
{
    
  public static int modInverse(int a, int m) {
        if (m == 1) {
            return -1; // Special case where mod is 1, inverse does not exist
        }

        int m0 = m, t, q;
        int x0 = 0, x1 = 1;

        int gcd = gcd(a, m);
        if (gcd != 1) {
            return -1; // If gcd is not 1, then inverse doesn't exist
        }

        // Apply extended Euclidean Algorithm
        while (a > 1) {
            q = a / m; // Quotient

            t = m;

            m = a % m; // Remainder
            a = t;

            t = x0;

            x0 = x1 - q * x0;

            x1 = t;
        }

        // Make x1 positive
        if (x1 < 0) {
            x1 += m0;
        }

        return x1;
    }

    // Helper function to compute gcd using Euclid's algorithm
    private static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }



}
